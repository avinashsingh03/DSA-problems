class Solution(object):
    def countDays(self, days, meetings):
        """
        :type days: int
        :type meetings: List[List[int]]
        :rtype: int
        """
        if not meetings:  # No meetings at all
            return days
        
        # Step 1: Sort meetings by start time
        meetings.sort()
        
        # Step 2: Merge overlapping intervals
        merged = []
        start, end = meetings[0]
        
        for i in range(1, len(meetings)):
            if meetings[i][0] <= end + 1:  # Overlapping or adjacent
                end = max(end, meetings[i][1])
            else:
                merged.append([start, end])
                start, end = meetings[i]
        
        merged.append([start, end])  # Add the last interval
        
        # Step 3: Count free days
        free_days = merged[0][0] - 1  # Days before first meeting
        
        for i in range(1, len(merged)):
            free_days += merged[i][0] - merged[i-1][1] - 1  # Gaps between meetings
        
        free_days += days - merged[-1][1]  # Days after last meeting
        
        return free_days
