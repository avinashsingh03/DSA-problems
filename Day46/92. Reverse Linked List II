/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if (!head || left == right) {
            return head;  // No need to reverse if the list is empty or left == right.
        }

        ListNode dummy(0);  // Dummy node to handle edge cases.
        dummy.next = head;
        ListNode* prev = &dummy;

        // Move `prev` to the node before `left`.
        for (int i = 1; i < left; ++i) {
            prev = prev->next;
        }

        // Start reversing the sublist.
        ListNode* curr = prev->next;  // `curr` points to the first node to reverse.
        ListNode* next = nullptr;

        for (int i = 0; i < right - left; ++i) {
            next = curr->next;
            curr->next = next->next;
            next->next = prev->next;
            prev->next = next;
        }

        return dummy.next;  // Return the updated head.
    }
};
