class Solution {
public:
    void solve(string &ans, int &n, string temp, int ind, int &count,int k){

        //base case
        if(ind==n) {
            count++;
            if(count == k){
                ans=temp;
            }
            return;
        }
        if(ans!="") return;

        //handling 0th index
        if(ind ==0){
            solve(ans,n , temp+"a",ind+1,count,k);
            solve(ans,n , temp+"b",ind+1,count,k);
            solve(ans,n , temp+"c",ind+1,count,k);
        }
        else{
            string arr[]={"a","b","c"};
            for(int i=0;i<3;i++){
                if(temp[ind-1]!=arr[i][0]){
                    solve(ans,n , temp+arr[i],ind+1,count,k);
                }
            }
        }
        return;

    }
    string getHappyString(int n, int k) {
        //we can generate all using backtracking , 
        //we will keep a count which will be increased only after the complete string is formed.
        //if we can reach k we will push that string at that time in ans and return it;
        //we will push  in order of a,b,c to maintain lexicographic order
        string ans="";
        int count=0;
        solve(ans,n,"",0,count,k);
        return ans;
    }
};
