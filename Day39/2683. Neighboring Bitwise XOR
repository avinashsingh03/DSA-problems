class Solution {
public:
    bool doesValidArrayExist(vector<int>& derived) {
        vector<int> original;
        int n=derived.size(); 
//handling edge case of size 1
        if(n==1 && derived[0]==0){
            return true;
        }
        if(n==1 && derived[0]==1){
            return false;
        }
// if size >1 it is pushing values in original array which can be XORed to give derived array.
        for(int i=0;i<n;i++){
            if(derived[i]==1 && i==0){
                original.push_back(1);
                original.push_back(0);
            }
            else if(derived[i]==0 && i==0){
                original.push_back(1);
                original.push_back(1);
            }
            else if(i==n-1){
                if(derived[n-1]==0){
                    if(original[n-1]==original[0]){
                        return true;
                    }
                    else{
                        return false;
                    }
                }
                else{
                    if(original[n-1]!=original[0]){
                        return true;
                    }
                    else{
                        return false;
                    }
                }
            }
            else if(derived[i]==1){
                if(original[i]==0){
                    original.push_back(1);
                }
                else{
                    original.push_back(0);
                }
            }
            else{
                if(original[i]==0){
                    original.push_back(0);
                }
                else{
                    original.push_back(1);
                }
            }
        }
        return false;  
    }
};
//Time complexity=O(n)
// Space complexity=O(n)
