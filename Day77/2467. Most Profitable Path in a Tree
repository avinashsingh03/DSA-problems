#pragma GCC optimize("O3,unroll-loops,Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx")
static const auto harsh = []() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return 0;
}();

#define LC_HACK
#ifdef LC_HACK
const auto __ = []() {
  struct ___ { static void _() { std::ofstream("display_runtime.txt") << 0 << '\n'; } };
  std::atexit(&___::_);
  return 0;
}();
#endif

class Solution {
public:
    bool BobTraversal(vector<vector<int>> &adj, vector<int>&TimeStamp, int &root, int parent, int Timer){
        
        TimeStamp[root] = Timer++;
        if(root == 0) return true;

        for(auto &nbr : adj[root]){
            if(nbr != parent){
                if(BobTraversal(adj, TimeStamp, nbr, root, Timer)){
                    return true;
                }
            }
        }
        // The Path we have not needed just make them back into INT_MAX
        TimeStamp[root] = INT_MAX;
        return false;
    }

    void AliceTraversal(vector<vector<int>> &adj, vector<int>&TimeStamp, vector<int> &amount, int root, int parent, int curr_profit, int AliceTime, int &maxProfit){
    // Alice Reaches first
        if(TimeStamp[root] > AliceTime){
            curr_profit += amount[root];
        }
    // Both Reached at a same time
        else if(TimeStamp[root] == AliceTime){
            curr_profit += (amount[root]/2);
        }
    // Else Alice get 0 only so curr_profit += 0
        AliceTime++;

        // Check if it is a leaf Node
        if(adj[root].size() == 1 && adj[root][0] == parent){
            maxProfit = max(maxProfit, curr_profit);
            return;
        }

        // Traverse to all other childrens
        for(auto &nbr : adj[root]){
            if(nbr != parent){
                AliceTraversal(adj, TimeStamp, amount, nbr, root, curr_profit, AliceTime, maxProfit);
            }
        }
        return;
    }

    int mostProfitablePath(vector<vector<int>>& edges, int bob, vector<int>& amount) {
        int n = amount.size();
        int maxProfit = INT_MIN;
        vector<int> TimeStamp(n, INT_MAX);
        vector<vector<int>> adj(n);

        int Timer = 1;
        for(int i = 0; i<edges.size(); i++){
            int u = edges[i][0];
            int v = edges[i][1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        // First Bob Traverse to root = 0 and create his TimeStamp
        BobTraversal(adj, TimeStamp, bob, -1, Timer);

        // Now that Bob have reached to root = 0. Now Alice will try to reach to optimal Leaf Node
        Timer = 1;
        AliceTraversal(adj, TimeStamp, amount, 0, -1, 0, Timer, maxProfit); 

        return maxProfit;
    }
};
